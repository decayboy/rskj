blockchain.config.name = "regtest"

peer {

    discovery = {

        # if peer discovery is off
        # the peer window will show
        # only what retrieved by active
        # peer [true/false]
        enabled = true

        # List of the peers to start
        # the search of the online peers
        # values: [ip:port]
        ip.list = [
            "localhost:30306",
            "localhost:30307"
        ]

        # Interface to bind UDP
        # Make sure you are using the correct bind ip. Wildcard value: 0.0.0.0
        bind.ip = 0.0.0.0
    }

    # Boot node list
    # Use to connect to specific nodes
    active = [
        {
            ip = 127.0.0.1
            port = 30306
            nodeId = 950a92f9cc7a6270e49094b0ece796ef2a9f6e6c5891c92ede82a1f7bb537ac7de261d01047b7ce0b3c87af46916176cf489d1bc1f67084f8de5d1a23bfd46c7
        },
        {
            ip = 127.0.0.1
            port = 30307
            nodeId = 27ff5188578640d7f29fe842448cc8caff234b8d9103bf03b56250935450aea733158e314708fc607067b3639f862097585d8f48fef561b5fd45bbd5a233f7bf
        }
    ]

    # list of trusted peers the incoming connections is always accepted from. Even if the max amount of connections is reached
    # This is used to create a filter of Trusted peers
    trusted = [
        # Sample entries:
        # {nodeId = "e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c"},
        # {ip = "11.22.33.44"},
        # {ip = "11.22.33.*"},
        # {
        #   nodeId = "e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c"
        #   ip = "11.22.33.44"
        # }
    ]

    # Peer for server to listen for incoming connections
    # 50505 for testnet
    listen.port = 30305

    # connection timeout for trying to connect to a peer [seconds]
    connection.timeout = 2

    # the parameter specifies how much time we will wait for a message to come before closing the channel
    channel.read.timeout = 30

    # Private key of the peer
    # derived nodeId = 2bc32aa570b3e292a9bd93380c1a23fb5c877d91bad5462affc80f45658e0abad0c4bef2d44aea6c2715e891114aa95ee09731dedf96bec099377a2f92aa13f0
    privateKey = 33987643b12d4eb3b567459c74c29dbd3baceb9c1ce095edac09c9994168e539

    # Network id
    networkId = 456124

    p2p {
        # max frame size in bytes when framing is enabled
        framing.maxSize = 32768

        # forces peer to send Handshake message in format defined by EIP-8,
        # see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md
        eip8 = true
    }

    # max number of active peers our node will maintain
    # extra peers trying to connect us will be dropeed with TOO_MANY_PEERS message
    # the incoming connection from the peer matching 'peer.trusted' entry is always accepted
    maxActivePeers = 30
}

# the folder resources/genesis contains several versions of genesis configuration according to the network the peer will run on
genesis = rsk-dev.json

# the number of blocks should pass before pending transaction is removed
transaction.outdated.threshold = 10

# the number of seconds should pass before pending transaction is removed
# (suggested value: 10 blocks * 10 seconds by block = 100 seconds)
transaction.outdated.timeout = 100

database {
    # place to save physical storage files
    dir = ~/dev/projects/rskj/database

    # every time the application starts the existing database will be destroyed and all the data will be downloaded from peers again
    # having this set on true does NOT mean that the block chain will start from the last point
    # [true/false]
    reset = true
}

dump {
    # for testing purposes all the state will be dumped in JSON form to [dump.dir] if [dump.full] = true
    # possible values [true/false]
    full = false

    dir = dmp

    # This defines the vmtrace dump to the console and the style
    # -1 for no block trace
    block = -1

    # styles: [pretty/standard+] (default: standard+)
    style = pretty

    # clean the dump dir each start
    clean.on.restart = true
}

# structured trace is the trace being collected in the form of objects and exposed to the user in json or any other convenient form
vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    initStorageLimit = 10000
}

# invoke vm program on message received, if the vm is not invoked the balance transfer occurs anyway  [true/false]
play.vm = true

# hello phrase will be included in the hello message of the peer
hello.phrase = Dev

# Key value data source values: [leveldb]
keyvalue.datasource = leveldb

# the parameter speciphy when exactly to switch managing storage of the account on autonomous db
details.inmemory.storage.limit = 10

sync {
    # block chain synchronization can be: [true/false]
    enabled = true

    # maximum blocks hashes to ask sending GET_BLOCK_HASHES msg we specify number of block we want to get, recomended value [1..1000]
    # Default: unlimited
    max.hashes.ask = 10000

    # minimal peers count used in sync process sync may use more peers than this value but always trying to get at least this number from discovery
    peer.count = 10

    # whether to wait for blockchain sync to start mining and pegging.
    waitForSync = false
}

# miner options
miner {
    server.enabled = true
    client.enabled = true
    minGasPrice = 0

    # these are values used by MinerServer to set the notify flag on/off
    gasUnitInDollars = 0.001
    minFeesNotifyInDollars = 30
}

# this string is computed to be eventually the address that get the miner reward
coinbase.secret = 450e818d1ad29480247a4e92c731feb980d1ef2e

rpc {
    enabled = true
    port = 4444

    # A value greater than zero sets the socket value in milliseconds. Node attempts to gently close all TCP/IP connections with proper half close semantics,
    # so a linger timeout should not be required and thus the default is -1.
    # linger.time = 0

    cors = "*.rsk.co"

    # Enabled RPC Modules. If the module is NOT in the list, and mark as "enabled", the rpc calls will be discard.
    # It is possible to enable/disable a particular method in a module
    # {
    #  name: "evm",
    #  version: "1.0",
    #  enabled: "true",
    #  methods: {
    #   enabled: [ "evm_snapshot", "evm_revert" ],
    #       disabled: [ "evm_reset", "evm_increaseTime" ]
    #  }
    # }
    modules = [
        {
            name: "eth",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "net",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "rpc",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "web3",
            version: "1.0",
            enabled: "true",
        },
        {
            name: "evm",
            version: "1.0",
            enabled: "true"
        },
        {
            name: "personal",
            version: "1.0",
            enabled: "true"
        },
        {
            name: "mnr",
            version: "1.0",
            enabled: "true"
        }
    ]
}

# account loaded when the node start.
wallet {
    accounts = []
}

wire {
    protocol: "rsk"
}

# solc compiler path
solc.path = /usr/bin/solc